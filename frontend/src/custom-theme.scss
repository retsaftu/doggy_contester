
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@use 'sass:map';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/

$dark-primary-text: rgba(black, 0.87);
$dark-secondary-text: rgba(black, 0.54);
$dark-disabled-text: rgba(black, 0.38);
$dark-dividers: rgba(black, 0.12);
$dark-focused: rgba(black, 0.12);
$light-primary-text: white;
$light-secondary-text: rgba(white, 0.7);
$light-disabled-text: rgba(white, 0.5);
$light-dividers: rgba(white, 0.12);
$light-focused: rgba(white, 0.12);

$notification-info: map.get(mat.$blue-palette, 400);
$notification-success: map.get(mat.$green-palette, 400);
$notification-warning: map.get(mat.$yellow-palette, 400);
$notification-error: map.get(mat.$red-palette, 400);

$light-background-color: #edf1f7;

$app-primary-palette: (
  50: #ffe8e6,
  100: #ffc8b9,
  200: #ffa48c,
  300: #ff7c5d,
  400: #ff5939,
  500: #ff2d13,
  600: #ff250e,
  700: #fe1906,
  800: #F00500,
  900: #d90000,
  A100: #ff8a80,
  A200: #ff5252,
  A400: #ff1744,
  A700: #d50000,
  contrast: (
    50: $dark-primary-text,
    100: $dark-primary-text,
    200: $dark-primary-text,
    300: $dark-primary-text,
    400: $dark-primary-text,
    500: $light-primary-text,
    600: $light-primary-text,
    700: $light-primary-text,
    800: $light-primary-text,
    900: $light-primary-text,
    A100: $dark-primary-text,
    A200: $light-primary-text,
    A400: $light-primary-text,
    A700: $light-primary-text,
  )
);


$custom-light-theme-background-palette: (
  status-bar: map.get(mat.$grey-palette, 300),
  app-bar:    map.get(mat.$grey-palette, 100),
  background: $light-background-color, //map.get(mat.$grey-palette, 50),
  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX
  card:       white,
  dialog:     white,
  disabled-button: rgba(black, 0.12),
  raised-button: white,
  focused-button: $dark-focused,
  selected-button: map.get(mat.$grey-palette, 300),
  selected-disabled-button: map.get(mat.$grey-palette, 400),
  disabled-button-toggle: map.get(mat.$grey-palette, 200),
  unselected-chip: map.get(mat.$grey-palette, 300),
  disabled-list-option: map.get(mat.$grey-palette, 200),
  tooltip: map.get(mat.$grey-palette, 700),
);

$custom-light-theme-foreground-palette: (
  base:              black,
  divider:           $dark-dividers,
  dividers:          $dark-dividers,
  disabled:          $dark-disabled-text,
  disabled-button:   rgba(black, 0.26),
  disabled-text:     $dark-disabled-text,
  elevation:         black,
  hint-text:         $dark-disabled-text,
  secondary-text:    $dark-secondary-text,
  icon:              rgba(black, 0.54),
  icons:             rgba(black, 0.54),
  text:              rgba(black, 0.87),
  slider-min:        rgba(black, 0.87),
  slider-off:        rgba(black, 0.26),
  slider-off-active: rgba(black, 0.38),
);

$doggy-contester-frontend-primary: mat.define-palette($app-primary-palette);
$doggy-contester-frontend-accent: mat.define-palette($app-primary-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$doggy-contester-frontend-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".

@function custom-create-light-color-config($primary, $accent, $warn) {
  @return (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $custom-light-theme-foreground-palette,
    background: $custom-light-theme-background-palette,
  );
}

// $doggy-contester-light-theme: mat.define-light-theme((
//   color: (
//     primary: $doggy-contester-frontend-primary,
//     accent: $doggy-contester-frontend-accent,
//     warn: $doggy-contester-frontend-warn,
//   ),
// ));

$doggy-contester-light-theme: custom-create-light-color-config(
  $doggy-contester-frontend-primary,
  $doggy-contester-frontend-accent, 
  $doggy-contester-frontend-warn
);  

$doggy-contester-dark-theme: mat.define-dark-theme((
  color: (
    primary: $doggy-contester-frontend-primary,
    accent: $doggy-contester-frontend-accent,
    warn: $doggy-contester-frontend-warn,
  ),
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($doggy-contester-light-theme);

.theme-dark {
  @include mat.all-component-colors($doggy-contester-dark-theme);

  .snackbar {
    background-color: #424242 !important;
    color: white;
    padding: 0;
  }
}

.theme-light {
  @include mat.all-component-themes($doggy-contester-light-theme);

  .snackbar {
    padding: 0;
    background-color: white !important;
    color: black;
  }
}